<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true">
  
  <!--nlog
      internalLogLevel="Warn"
      internalLogFile="C:\Temp\Logs\internal-nlog.txt"-->

  <extensions>
    <!--enable NLog.Web for ASP.NET Core-->
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>

  <!-- Variables (update at runtime in controller) -->
  <variable name="connectionId" value="" />
  <variable name="GuidSQL" value="" />
  <variable name="UserID" value="" />
  
  <targets>
    <!--<target xsi:type="File" name="allfile" fileName="${var:configDir}\nlog-all.log"
                layout="${longdate}|${event-properties:item=EventId.Id}|${logger}|${uppercase:${level}}|${message} ${exception}" />
 
    <target xsi:type="File" name="ownFile-web" fileName="${var:configDir}\nlog-own.log"
             layout="${longdate}|${event-properties:item=EventId.Id}|${logger}|${uppercase:${level}}|  ${message} ${exception}" />-->
 
    <target xsi:type="Null" name="blackhole" />
 
    <target name="database" xsi:type="Database" >

      <connectionString>${var:connectionString}</connectionString>
<!--
  Remarks:
    The appsetting layouts require the NLog.Extended assembly.
    The aspnet-* layouts require the NLog.Web assembly.
    The Application value is determined by an AppName appSetting in Web.config.
    The "NLogDb" connection string determines the database that NLog write to.
    The create dbo.Log script in the comment below must be manually executed.
 
  Script for creating the dbo.Log table.
 
  SET ANSI_NULLS ON
  SET QUOTED_IDENTIFIER ON
  CREATE TABLE [dbo].[Log] (
      [Id] [int] IDENTITY(1,1) NOT NULL,
      [Application] [nvarchar](50) NOT NULL,
      [Logged] [datetime] NOT NULL,
      [Level] [nvarchar](50) NOT NULL,
      [UserId] [nvarchar](100) NULL,
      [ProcessId] [nvarchar](50) NULL,
      [RequestId] [nvarchar](50) NULL,
      [Message] [nvarchar](max) NOT NULL,
      [Logger] [nvarchar](250) NULL,
      [Callsite] [nvarchar](max) NULL,
      [Exception] [nvarchar](max) NULL,
    CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([Id] ASC)
      WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
  ) ON [PRIMARY]
-->
 
          <commandText>
              insert into dbo.Log (
              Application, Logged, Level, 
              UserId, ProcessId, RequestId, 
              Message, Logger, CallSite, Exception
              ) values (
              @Application, @Logged, @Level, 
              @UserId, @ProcessId, @RequestId, 
              @Message, @Logger, @Callsite, @Exception
              );
          </commandText>
 
          <parameter name="@application" layout="CCCOUNT" />
          <parameter name="@logged" layout="${date}" />
          <parameter name="@level" layout="${level}" />
          <parameter name="@userid" layout="${var:userid}" />
          <parameter name="@processid" layout="${var:connectionId}" />
          <!--<parameter name="@requestid" layout="${aspnet-traceidentifier}" />-->
          <parameter name="@requestid" layout="${var:GuidSQL}" />
          <parameter name="@message" layout="${message}" />
          <parameter name="@logger" layout="${logger}" />
          <parameter name="@callSite" layout="${callsite:filename=true}" />
          <parameter name="@exception" layout="${exception:tostring}" />
      </target>
       
  </targets>
 
  <rules>
    <!--All logs, including from Microsoft-->
    <!--<logger name="*" minlevel="Trace" writeTo="allfile" />-->
 
    <logger name="*" minlevel="Debug" writeTo="database" />
       
    <!--Skip Microsoft logs and so log only own logs-->
    <logger name="Microsoft.*" minlevel="Trace" writeTo="blackhole" final="true" />
    <!--<logger name="*" minlevel="Trace" writeTo="ownFile-web" />-->
  </rules>
</nlog>